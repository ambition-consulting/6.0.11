<%--
/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
--%>

<%
Map<String, PortletURL> addPortletURLs = getAddPortletURLs(renderRequest, renderResponse, classNameIds, assetEntryQuery.getAllCategoryIds(), allAssetTagNames);
%>

<c:if test="<%= !addPortletURLs.isEmpty() %>">
	<div class="lfr-meta-actions edit-controls">
		<liferay-ui:icon-menu
			align="left"
			icon='<%= themeDisplay.getPathThemeImages() + "/common/add.png" %>'
			message="add-new"
			showWhenSingleIcon="<%= true %>"
		>

			<%
			for (Map.Entry<String, PortletURL> entry : addPortletURLs.entrySet()) {
				String className = entry.getKey();
				PortletURL addPortletURL = entry.getValue();

				AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);
			%>

				<liferay-ui:icon
					message='<%= "model.resource." + className %>'
					src="<%= assetRendererFactory.getIconPath(renderRequest) %>"
					url='<%= addPortletURL.toString() %>'
				/>

			<%
			}
			%>

		</liferay-ui:icon-menu>
	</div>
</c:if>

<%!
public PortletURL getAddPortletURL(RenderRequest renderRequest, PortletResponse portletResponse, String className, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);

	AssetRendererFactory assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(className);

	PortletURL addPortletURL = null;

	if (assetRendererFactory != null) {
		addPortletURL = assetRendererFactory.getURLAdd((LiferayPortletRequest)renderRequest, (LiferayPortletResponse)portletResponse);

		if (addPortletURL != null) {
			addPortletURL.setWindowState(WindowState.MAXIMIZED);
			addPortletURL.setPortletMode(PortletMode.VIEW);

			addPortletURL.setParameter("redirect", themeDisplay.getURLCurrent());
			addPortletURL.setParameter("backURL", themeDisplay.getURLCurrent());

			String referringPortletResource = ParamUtil.getString(renderRequest, "portletResource");

			if (Validator.isNotNull(referringPortletResource)) {
				addPortletURL.setParameter("referringPortletResource", referringPortletResource);
			}
			else {
				PortletDisplay portletDisplay = themeDisplay.getPortletDisplay();

				addPortletURL.setParameter("referringPortletResource", portletDisplay.getId());

				addPortletURL.setParameter("assetCategoryIds", StringUtil.merge(allAssetCategoryIds));
				addPortletURL.setParameter("assetTagNames", StringUtil.merge(allAssetTagNames));
			}
		}
	}

	return addPortletURL;
}

public Map<String, PortletURL> getAddPortletURLs(RenderRequest renderRequest, PortletResponse portletResponse, long[] classNameIds, long[] allAssetCategoryIds, String[] allAssetTagNames) throws Exception {
	ThemeDisplay themeDisplay = (ThemeDisplay)renderRequest.getAttribute(WebKeys.THEME_DISPLAY);

	Map<String, PortletURL> addPortletURLs = new TreeMap<String, PortletURL>(new ModelResourceComparator(themeDisplay.getLocale()));

	for (long classNameId : classNameIds) {
		ClassName className = ClassNameServiceUtil.getClassName(classNameId);

		PortletURL addPortletURL = getAddPortletURL(renderRequest, portletResponse, className.getValue(), allAssetCategoryIds, allAssetTagNames);

		if (addPortletURL != null) {
			addPortletURLs.put(className.getValue(), addPortletURL);
		}
	}

	return addPortletURLs;
}
%>